generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["createMany"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model ProtocolActionProperties {
  id          Int      @id @default(autoincrement())
  actionId    Int?
  name        String?  @db.VarChar(45)
  actionType  Int?
  optionsJSON String?  @db.Text
  description String?  @db.Text
  required    Boolean? @db.Bit(1)
}

model ProtocolActions {
  id          Int        @id @default(autoincrement())
  protocolId  Int?
  name        String?    @db.VarChar(45)
  description String?    @db.VarChar(45)
  icon        String?    @db.VarChar(500)
  Protocols   Protocols? @relation(fields: [protocolId], references: [id])

  @@index([protocolId], name: "protocol")
}

model Protocols {
  id                         Int                          @id @default(autoincrement())
  name                       String?                      @db.VarChar(45)
  website                    String?                      @db.VarChar(45)
  toolbarImageURL            String?                      @db.VarChar(500)
  showOnToolbar              String?                      @db.VarChar(45)
  edgeColor                  String?                      @db.VarChar(45)
  description                String?                      @db.Text
  vertexImageURL             String?                      @db.VarChar(500)
  mediumImageURL             String?                      @db.VarChar(500)
  actions                    ProtocolActions[]
  protocol_category_relation protocol_category_relation[]
}

model Strategies {
  id               Int       @id @default(autoincrement())
  name             String?   @db.VarChar(255)
  data_open        DateTime? @db.Time(0)
  earnings         Int?
  json             String?   @db.LongText
  earnings_per     Int?
  allocation       Int?
  profit           Int?
  last_transaction Int?
  apy              Int?
  buru_token       Int?
  status           Int?
  createdAt        DateTime  @db.DateTime(0)
  updatedAt        DateTime  @db.DateTime(0)
  userId           Int?
  Users            Users?    @relation(fields: [userId], references: [id])

  @@index([userId], name: "User_Strategy_FK")
}

model Users {
  id                  Int                     @id @default(autoincrement())
  walletAddress       String?                 @unique @db.VarChar(45)
  createdAt           DateTime?               @default(now()) @db.DateTime(0)
  updatedAt           DateTime?               @default(now()) @db.DateTime(0)
  avatarURL           String?                 @db.VarChar(45)
  username            String?                 @db.VarChar(45)
  description         String?                 @db.Text
  GUID                String                  @unique @db.VarChar(255)
  buru_token_minted   Int?
  firstname           String?                 @db.VarChar(255)
  middlename          String?                 @db.VarChar(255)
  lastname            String?                 @db.VarChar(255)
  gender              String?                 @db.VarChar(255)
  birthdate           DateTime?               @db.Date
  address             String?                 @db.VarChar(500)
  city                String?                 @db.VarChar(100)
  postalcode          String?                 @db.VarChar(100)
  country             String?                 @db.VarChar(255)
  birthsameascitizen  Boolean?
  passportnum         String?                 @db.VarChar(255)
  exp_equities        Users_exp_equities?
  exp_crypto          Users_exp_crypto?
  exp_leveraged       Users_exp_leveraged?
  farmer_knowledge    Users_farmer_knowledge?
  planned_investments String?                 @db.VarChar(1000)
  farmer_strategy     String?                 @db.VarChar(255)
  farmer_purpose      String?                 @db.VarChar(300)
  risk_limit          String?                 @db.VarChar(400)
  income_sources      String?                 @db.VarChar(500)
  streetNo            String?                 @db.VarChar(40)
  Strategies          Strategies[]
}

model notifications {
  id           Int      @id @default(autoincrement())
  notification String?  @db.VarChar(255)
  createdAt    DateTime @db.DateTime(0)
  updatedAt    DateTime @db.DateTime(0)
}

model pancakeSwapPairs {
  id            Int               @id @default(autoincrement())
  pair_contract String            @db.VarChar(100)
  base_symbol   Int
  quote_symbol  Int
  last_price    Float
  lastUpdated   DateTime          @db.DateTime(0)
  base_token    pancakeSwapTokens @relation(fields: [base_symbol], references: [id])
  quote_token   pancakeSwapTokens @relation("pancakeSwapPairs_quote_symbolTopancakeSwapTokens", fields: [quote_symbol], references: [id])

  @@index([base_symbol], name: "base_token")
  @@index([quote_symbol], name: "quote_token")
}

model pancakeSwapTokens {
  id                                                                Int                @id @default(autoincrement())
  name                                                              String             @db.VarChar(50)
  price                                                             Float
  lastUpdated                                                       DateTime           @db.DateTime(0)
  pancakeSwapPairs                                                  pancakeSwapPairs[]
  pancakeSwapPairs_pancakeSwapPairs_quote_symbolTopancakeSwapTokens pancakeSwapPairs[] @relation("pancakeSwapPairs_quote_symbolTopancakeSwapTokens")

  @@index([name], name: "name")
}

model protocol_categories {
  id                         Int                          @id @default(autoincrement())
  name                       String                       @unique @db.VarChar(120)
  protocol_category_relation protocol_category_relation[]
}

model protocol_category_relation {
  id                  Int                 @id @default(autoincrement())
  protocol_id         Int
  category_id         Int
  protocol_categories protocol_categories @relation(fields: [category_id], references: [id])
  Protocols           Protocols           @relation(fields: [protocol_id], references: [id])

  @@index([category_id], name: "category")
  @@index([protocol_id], name: "protocol_cat")
}

model yearn_vaults {
  id                    Int      @id @default(autoincrement())
  tokenIcon             String   @db.VarChar(500)
  symbol                String   @db.VarChar(200)
  address               String?  @db.VarChar(200)
  name                  String   @unique @db.VarChar(100)
  tokenName             String   @db.VarChar(100)
  tokenSymbol           String   @db.VarChar(100)
  strategyName          String   @db.VarChar(100)
  tokenAddress          String?  @db.VarChar(200)
  vaultIcon             String?  @db.VarChar(250)
  apy_tokenAddress      String?  @map("apy.tokenAddress") @db.VarChar(200)
  apy_apyOneMonthSample Float    @map("apy.apyOneMonthSample")
  apy_symbol            String   @map("apy.symbol") @db.VarChar(100)
  apy_apyOneWeekSample  Float    @map("apy.apyOneWeekSample")
  apy_description       String   @map("apy.description") @db.VarChar(100)
  timestamp             DateTime @default(now()) @db.DateTime(0)
}

model farmers {
  name             String  @db.VarChar(255)
  metamask_account String  @db.Text
  description      String  @db.Text
  profit           String? @db.VarChar(100)
  id               Int     @id @default(autoincrement())
  picture          String  @db.Text
  amount           String? @db.Text
}

enum Users_exp_equities {
  never
  few
  some
  many
}

enum Users_exp_crypto {
  never
  few
  some
  many
}

enum Users_exp_leveraged {
  never
  few
  some
  many
}

enum Users_farmer_knowledge {
  professional
  academicdegree
  noknowledge
  attendedcourses
}
